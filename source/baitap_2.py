# 1. Write a Python program to calculate the length of a string
a = input("Nh·∫≠p v√†o m·ªôt chu·ªói b·∫•t k·ª≥: ")
print (f"ƒê·ªô d√†i c·ªßa chu·ªói l√† {len(a)}")
# 2. Write a Python program to count the number of characters (character frequency) in a string.
from collections import Counter
s = input("Nh·∫≠p v√†o chu·ªói: ")
freq = Counter(s)
print("T·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c k√Ω t·ª±:")
print(dict(freq))
print("T·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c k√Ω t·ª±:")
print(freq)
# 3. Write a Python program to get a string made of the first 2 and last 2 characters of a given string. If the string length is less than 2, return the empty string instead.
a = input("Nh·∫≠p v√†o m·ªôt chu·ªói b·∫•t k·ª≥: ")
b = len(a)
if b < 2:
    print ("Empty String!")
else:
    haikitudau = a[0:2]
    haikitucuoi = a[len(a)-2:len(a)]
    print (f"K·∫øt qu·∫£ l·∫•y hai k√≠ t·ª± ƒë·∫ßu v√† cu·ªëi gh√©p l·∫°i: {haikitudau + haikitucuoi}")
# 4. Write a Python program to get a string from a given string where all occurrences of its first char have been changed to '$', except the first char itself.
a = input("Nh·∫≠p v√†o m·ªôt chu·ªói b·∫•t k·ª≥: ")
b = a[0]                # l·∫•y k√Ω t·ª± ƒë·∫ßu ti√™n
c = a[1:].replace(b, '$')  # thay th·∫ø trong ph·∫ßn c√≤n l·∫°i
result = b + c
print("K·∫øt qu·∫£:", result)
# 5. Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string.
a = input("Nh·∫≠p v√†o chu·ªói th·ª© nh·∫•t: ")
b = input("Nh·∫≠p v√†o chu·ªói th·ª© hai: ")
c = a[0:2] + b[2:len(b)]
d = b[0:2] + a[2:len(a)]
print(f'K·∫øt qu·∫£: {d + " " + c}')
# 6. Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing', add 'ly' instead. If the string length of the given string is less than 3, leave it unchanged
a = input("Nh·∫≠p v√†o m·ªôt chu·ªói b·∫•t k·ª≥: ")
b = len(a) # T√¨m ƒë·ªô d√†i c·ªßa chu·ªói
c = a[len(a)-3:len(a)] # L·∫•y ra 3 k√≠ t·ª± cu·ªëi c·ªßa chu·ªói
if b >= 3 and c!= "ing":
   a += "ing"
   print(f"K·∫øt qu·∫£: {a}")
elif b<3:
   print(f"K·∫øt qu·∫£: {a}")
else:
   print(f"K·∫øt qu·∫£ {a+"ly"}")
# 7. Write a Python program to find the first appearance of the substrings 'not' and 'poor' in a given string. If 'not' follows 'poor', replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.
s = input("Nh·∫≠p v√†o chu·ªói b·∫•t k·ª≥: ")
# T√¨m v·ªã tr√≠ c·ªßa "not" v√† "poor"
not_index = s.find("not")
poor_index = s.find("poor")
# N·∫øu c√≥ c·∫£ "not" v√† "poor" v√† "not" ƒë·ª©ng tr∆∞·ªõc "poor"
if not_index != -1 and poor_index != -1 and not_index < poor_index:
    s = s[:not_index] + "good" + s[poor_index+4:]
# In k·∫øt qu·∫£
print("K·∫øt qu·∫£:", s)
# 8. Write a Python function that takes a list of words and return the longest word and the length of the longest one
words_input = input("Nh·∫≠p v√†o danh s√°ch t·ª´ (c√°ch nhau b·∫±ng kho·∫£ng tr·∫Øng): ")
# T√°ch chu·ªói th√†nh list
words = words_input.split()
# T√¨m t·ª´ d√†i nh·∫•t
longest_word = words[0]        # gi·∫£ s·ª≠ t·ª´ ƒë·∫ßu ti√™n d√†i nh·∫•t
max_length = len(longest_word) # ƒë·ªô d√†i c·ªßa t·ª´ ƒë·∫ßu ti√™n
for word in words:
    word_length = len(word)   # ƒë·ªô d√†i c·ªßa t·ª´ hi·ªán t·∫°i
    if word_length > max_length:
        longest_word = word
        max_length = word_length
# In k·∫øt qu·∫£
print("T·ª´ d√†i nh·∫•t: ", longest_word)
print("S·ªë k√≠ t·ª± c·ªßa t·ª´ d√†i nh·∫•t: ", max_length)
# 9. Write a Python program to remove the nth index character from a nonempty string.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
n = int(input("Nh·∫≠p v·ªã tr√≠ index c·∫ßn x√≥a: "))
def remove_char_at(s, n):
    # Ki·ªÉm tra n c√≥ h·ª£p l·ªá kh√¥ng
    if n < 0 or n >= len(s):
        return "Index kh√¥ng h·ª£p l·ªá!"
    # Gh√©p chu·ªói b·ªè qua k√Ω t·ª± t·∫°i v·ªã tr√≠ n
    return s[:n] + s[n+1:]
# In k·∫øt qu·∫£
ket_qua = remove_char_at(chuoi, n)
print("Chu·ªói sau khi x√≥a:", ket_qua)
# 10. Write a  Python program to change a given string to a newly string where the first and last chars have been exchanged.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
# N·∫øu chu·ªói d√†i <= 1 th√¨ gi·ªØ nguy√™n
if len(chuoi) <= 1:
    ket_qua = chuoi
else:
    # L·∫•y k√Ω t·ª± ƒë·∫ßu v√† k√Ω t·ª± cu·ªëi
    dau = chuoi[0]
    cuoi = chuoi[-1]
    # Ph·∫ßn ·ªü gi·ªØa (b·ªè ƒë·∫ßu v√† cu·ªëi ƒëi)
    giua = chuoi[1:-1]
    # Gh√©p l·∫°i: cu·ªëi + gi·ªØa + ƒë·∫ßu
    ket_qua = cuoi + giua + dau
# In k·∫øt qu·∫£
print("Chu·ªói sau khi ho√°n ƒë·ªïi:", ket_qua)
# 11. Write a Python program to remove characters that have odd index values in a given string
# Nh·∫≠p chu·ªói t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
# Gi·ªØ l·∫°i c√°c k√Ω t·ª± c√≥ ch·ªâ s·ªë ch·∫µn
ket_qua = ""
for i in range(len(chuoi)):
    if i % 2 == 0:  # index ch·∫µn
        ket_qua += chuoi[i]
print("Chu·ªói sau khi x√≥a k√Ω t·ª± ·ªü v·ªã tr√≠ l·∫ª:", ket_qua)
# 12. Write a Python program to count the occurrences of each word in a given sentence.
# Nh·∫≠p c√¢u t·ª´ ng∆∞·ªùi d√πng
cau = input("Nh·∫≠p c√¢u: ")
# T√°ch c√¢u th√†nh danh s√°ch c√°c t·ª´
tu_list = cau.split()
# D√πng dictionary ƒë·ªÉ ƒë·∫øm
dem = {}
for tu in tu_list:
    if tu in dem:
        dem[tu] += 1
    else:
        dem[tu] = 1
print("S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói t·ª´:")
for tu, so_lan in dem.items():
    print(tu, ":", so_lan)
# 13. Write a Python script that takes input from the user and displays that input back in upper and lower cases.
# Nh·∫≠p chu·ªói t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
print("Ch·ªØ hoa:", chuoi.upper())
print("Ch·ªØ th∆∞·ªùng:", chuoi.lower())
# 14. Write a Python program that accepts a comma-separated sequence of words as input and prints the distinct words in sorted form (alphanumerically).
# Nh·∫≠p chu·ªói t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p c√°c t·ª´ (ngƒÉn c√°ch b·∫±ng d·∫•u ph·∫©y): ")
# T√°ch c√°c t·ª´, b·ªè kho·∫£ng tr·∫Øng th·ª´a
tu_list = [tu.strip() for tu in chuoi.split(",")]
# L·ªçc ra c√°c t·ª´ kh√°c nhau (set), r·ªìi s·∫Øp x·∫øp
tu_khac_nhau = sorted(set(tu_list))
# In k·∫øt qu·∫£
print("K·∫øt qu·∫£:", ", ".join(tu_khac_nhau))
# 15. Write a  Python function to create an HTML string with tags around the word(s).
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
tag = input("Nh·∫≠p t√™n th·∫ª HTML (vd: i, b, u...): ")   # Nh·∫≠p t√™n th·∫ª
word = input("Nh·∫≠p t·ª´/c√¢u c·∫ßn bao quanh: ")           # Nh·∫≠p t·ª´/c√¢u mu·ªën g·∫Øn th·∫ª
# H√†m t·∫°o chu·ªói HTML v·ªõi th·∫ª bao quanh
def add_tags(tag, word):
    return f"<{tag}>{word}</{tag}>"
# In k·∫øt qu·∫£
print("üëâ K·∫øt qu·∫£:", add_tags(tag, word))
# 16. Write a Python function to insert a string in the middle of a string.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
bracket = input("Nh·∫≠p chu·ªói khung (vd: [[]], {{}}): ")   # Nh·∫≠p chu·ªói khung
word = input("Nh·∫≠p chu·ªói mu·ªën ch√®n v√†o gi·ªØa: ")          # Nh·∫≠p chu·ªói c·∫ßn ch√®n
# H√†m ch√®n chu·ªói word v√†o gi·ªØa chu·ªói bracket
def insert_string_middle(bracket, word):
    mid = len(bracket) // 2   # T√≠nh v·ªã tr√≠ gi·ªØa
    return bracket[:mid] + word + bracket[mid:]  # Gh√©p l·∫°i: ph·∫ßn ƒë·∫ßu + word + ph·∫ßn sau
# In k·∫øt qu·∫£
print("K·∫øt qu·∫£:", insert_string_middle(bracket, word))
# 17. Write a Python function to get a string made of 4 copies of the last two characters of a specified string (length must be at least 2).
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói (√≠t nh·∫•t 2 k√Ω t·ª±): ")   # Nh·∫≠p chu·ªói
# H√†m t·∫°o chu·ªói g·ªìm 4 b·∫£n sao c·ªßa 2 k√Ω t·ª± cu·ªëi
def insert_end(s):
    if len(s) < 2:    # N·∫øu chu·ªói qu√° ng·∫Øn th√¨ b√°o l·ªói
        return "Chu·ªói ph·∫£i d√†i √≠t nh·∫•t 2 k√Ω t·ª±"
    last2 = s[-2:]    # L·∫•y 2 k√Ω t·ª± cu·ªëi
    return last2 * 4  # L·∫∑p l·∫°i 4 l·∫ßn
# In k·∫øt qu·∫£
print("K·∫øt qu·∫£:", insert_end(chuoi))
# 18. Write a  Python function to get a string made of the first three characters of a specified string. If the length of the string is less than 3, return the original string.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")   # Nh·∫≠p chu·ªói
# H√†m l·∫•y 3 k√Ω t·ª± ƒë·∫ßu ti√™n
def first_three(s):
    if len(s) < 3:    # N·∫øu chu·ªói ng·∫Øn h∆°n 3 k√Ω t·ª±
        return s      # Tr·∫£ nguy√™n chu·ªói
    return s[:3]      # Ng∆∞·ª£c l·∫°i, l·∫•y 3 k√Ω t·ª± ƒë·∫ßu
# In k·∫øt qu·∫£
print("K·∫øt qu·∫£:", first_three(chuoi))
# 19. Write a Python program to get the last part of a string before a specified characte
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói (vd: ƒë∆∞·ªùng link): ")   # Nh·∫≠p chu·ªói
ky_tu = input("Nh·∫≠p k√Ω t·ª± c·∫ßn c·∫Øt tr∆∞·ªõc (m·∫∑c ƒë·ªãnh l√† '/'): ")   # Nh·∫≠p k√Ω t·ª± c·∫ßn c·∫Øt
# N·∫øu kh√¥ng nh·∫≠p k√Ω t·ª± th√¨ m·∫∑c ƒë·ªãnh l√† "/"
if ky_tu.strip() == "":
    ky_tu = "/"
# H√†m c·∫Øt chu·ªói: l·∫•y ph·∫ßn tr∆∞·ªõc k√Ω t·ª± cu·ªëi c√πng xu·∫•t hi·ªán
def get_last_part(s, char="/"):
    return s.rsplit(char, 1)[0]   # rsplit t√°ch t·ª´ b√™n ph·∫£i, s·ªë l·∫ßn = 1
# In k·∫øt qu·∫£
print("K·∫øt qu·∫£:", get_last_part(chuoi, ky_tu))
# 20. Write a  Python function to reverse a string if its length is a multiple of 4.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
def reverse_if_multiple_of_4(s):
    if len(s) % 4 == 0:   # Ki·ªÉm tra ƒë·ªô d√†i c√≥ chia h·∫øt cho 4 kh√¥ng
        return s[::-1]    # ƒê·∫£o chu·ªói
    return s              # N·∫øu kh√¥ng th√¨ gi·ªØ nguy√™n
print("K·∫øt qu·∫£:", reverse_if_multiple_of_4(chuoi))
# 21. Write a Python function to convert a given string to all uppercase if it contains at least 2  uppercase characters in the first 4 characters.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
def to_upper_if_condition(s):
    # ƒê·∫øm s·ªë ch·ªØ hoa trong 4 k√Ω t·ª± ƒë·∫ßu
    count_upper = sum(1 for c in s[:4] if c.isupper())
    if count_upper >= 2:
        return s.upper()
    return s
print("K·∫øt qu·∫£:", to_upper_if_condition(chuoi))
# 22.Write a  Python program to sort a string lexicographically.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
# S·∫Øp x·∫øp k√Ω t·ª± theo alphabet
ket_qua = "".join(sorted(chuoi))
print("K·∫øt qu·∫£:", ket_qua)
# 23. Write a Python program to remove a newline in Python.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
print("Nh·∫≠p chu·ªói (c√≥ th·ªÉ g√µ nhi·ªÅu d√≤ng, b·∫•m Enter r·ªìi Ctrl+D / Ctrl+Z ƒë·ªÉ k·∫øt th√∫c):")
import sys
chuoi = sys.stdin.read()   # ƒê·ªçc nhi·ªÅu d√≤ng t·ª´ input
# X√≥a k√Ω t·ª± xu·ªëng d√≤ng
ket_qua = chuoi.replace("\n", "")
print("K·∫øt qu·∫£:", ket_qua)
# 24. Write a Python program to check whether a string starts with specified characters.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
chuoi = input("Nh·∫≠p chu·ªói: ")
prefix = input("Nh·∫≠p k√Ω t·ª±/chu·ªói c·∫ßn ki·ªÉm tra: ")
if chuoi.startswith(prefix):
    print("Chu·ªói b·∫Øt ƒë·∫ßu b·∫±ng:", prefix)
else:
    print("Chu·ªói KH√îNG b·∫Øt ƒë·∫ßu b·∫±ng:", prefix)
# 25. Write a Python program to create a Caesar encryption.
# Nh·∫≠p t·ª´ ng∆∞·ªùi d√πng
text = input("Nh·∫≠p chu·ªói c·∫ßn m√£ h√≥a: ")
shift = int(input("Nh·∫≠p s·ªë b∆∞·ªõc d·ªãch (vd: 3): "))
def caesar_encrypt(text, shift):
    result = ""
    for char in text:
        if char.isalpha():   # N·∫øu l√† ch·ªØ c√°i
            base = ord('A') if char.isupper() else ord('a')
            result += chr((ord(char) - base + shift) % 26 + base)
        else:
            result += char   # Gi·ªØ nguy√™n n·∫øu kh√¥ng ph·∫£i ch·ªØ c√°i
    return result
print("Chu·ªói m√£ h√≥a:", caesar_encrypt(text, shift))
# 26. Write a  Python program to display formatted text (width=50) as output.
import textwrap
chuoi = input("Nh·∫≠p chu·ªói: ")
print(textwrap.fill(chuoi, width=50))
# 27. Write a  Python program to remove existing indentation from all of the lines in a given text.
import textwrap
chuoi = """    ƒê√¢y l√† d√≤ng c√≥ th·ª•t v√†o
        ƒê√¢y c≈©ng v·∫≠y
    L·∫°i th√™m d√≤ng n·ªØa"""
print(textwrap.dedent(chuoi))
# 28. Write a Python program to add prefix text to all of the lines in a string.
chuoi = """D√≤ng 1
D√≤ng 2
D√≤ng 3"""
prefix = input("Nh·∫≠p prefix: ")
print("\n".join(prefix + line for line in chuoi.splitlines()))
# 29. Write a Python program to set the indentation of the first line.
chuoi = input("Nh·∫≠p chu·ªói: ")
indented = "    " + chuoi
print(indented)
# 30. Write a Python program to print the following numbers up to 2 decimal places.
num = float(input("Nh·∫≠p s·ªë: "))
print("K·∫øt qu·∫£: {:.2f}".format(num))
# 31. Write a Python program to print the following numbers up to 2 decimal places with a sign.
num = float(input("Nh·∫≠p s·ªë: "))
print("K·∫øt qu·∫£: {:+.2f}".format(num))
# 32. Write a Python program to print the following positive and negative numbers with no decimal places.
so_duong = float(input("Nh·∫≠p s·ªë d∆∞∆°ng: "))
so_am = float(input("Nh·∫≠p s·ªë √¢m: "))
print("K·∫øt qu·∫£:", "{:.0f}".format(so_duong), "{:.0f}".format(so_am))
# 33. Write a  Python program to print the following integers with zeros to the left of the specified width.
num = int(input("Nh·∫≠p s·ªë: "))
width = int(input("Nh·∫≠p chi·ªÅu r·ªông: "))
print("K·∫øt qu·∫£:", str(num).zfill(width))
# 34. Write a  Python program to print the following integers with '*' to the right of the specified width.
num = int(input("Nh·∫≠p s·ªë: "))
width = int(input("Nh·∫≠p chi·ªÅu r·ªông: "))
print("K·∫øt qu·∫£:", f"{num:*<{width}}")
# 35. Write a Python program to display a number with a comma separator.
num = int(input("Nh·∫≠p s·ªë: "))
print("K·∫øt qu·∫£:", "{:,}".format(num))
# 36. Write a Python program to format a number with a percentage.
num = float(input("Nh·∫≠p s·ªë: "))
print("K·∫øt qu·∫£:", "{:.2%}".format(num))
# 37. Write a Python program to display a number in left, right, and center aligned with a width of 10.
num = input("Nh·∫≠p s·ªë: ")
print("Tr√°i:", "{:<10}".format(num))
print("Ph·∫£i:", "{:>10}".format(num))
print("Gi·ªØa:", "{:^10}".format(num))
# 38. Write a Python program to count occurrences of a substring in a string.
chuoi = input("Nh·∫≠p chu·ªói: ")
sub = input("Nh·∫≠p chu·ªói con: ")
print("S·ªë l·∫ßn xu·∫•t hi·ªán:", chuoi.count(sub))
# 39. Write a  Python program to reverse a string.
chuoi = input("Nh·∫≠p chu·ªói: ")
print("Chu·ªói ƒë·∫£o ng∆∞·ª£c:", chuoi[::-1])
# 40. Write a Python program to reverse words in a string.
chuoi = input("Nh·∫≠p chu·ªói: ")
print("ƒê·∫£o t·ª´:", " ".join(chuoi.split()[::-1]))
# 51. Write a  Python program to find the first non-repeating character in a given string.
chuoi = input("Nh·∫≠p chu·ªói: ")  # Nh·∫≠p chu·ªói t·ª´ ng∆∞·ªùi d√πng
for ch in chuoi:  # Duy·ªát t·ª´ng k√Ω t·ª±
    if chuoi.count(ch) == 1:  # N·∫øu k√Ω t·ª± ch·ªâ xu·∫•t hi·ªán 1 l·∫ßn
        print("K√Ω t·ª± kh√¥ng l·∫∑p ƒë·∫ßu ti√™n:", ch)
        break
else:  # N·∫øu kh√¥ng t√¨m th·∫•y
    print("Kh√¥ng c√≥ k√Ω t·ª± n√†o duy nh·∫•t")
# 52. Write a Python program to print all permutations with a given repetition number of characters of a given string.
import itertools
chuoi = input("Nh·∫≠p chu·ªói: ")
n = int(input("Nh·∫≠p ƒë·ªô d√†i ho√°n v·ªã: "))
# itertools.product t·∫°o ra ho√°n v·ªã c√≥ l·∫∑p
perms = itertools.product(chuoi, repeat=n)
for p in perms:
    print("".join(p))  # Gh√©p tuple th√†nh chu·ªói
# 53. Write a Python program to find the first repeated character in a given string.
chuoi = input("Nh·∫≠p chu·ªói: ")
seen = set()  # T·∫≠p h·ª£p ƒë·ªÉ l∆∞u k√Ω t·ª± ƒë√£ g·∫∑p
for ch in chuoi:
    if ch in seen:  # N·∫øu g·∫∑p l·∫°i k√Ω t·ª±
        print("K√Ω t·ª± l·∫∑p ƒë·∫ßu ti√™n:", ch)
        break
    seen.add(ch)  # Th√™m k√Ω t·ª± v√†o t·∫≠p
else:
    print("Kh√¥ng c√≥ k√Ω t·ª± l·∫∑p")
# 54. Write a  Python program to find the first repeated character in a given string where the index of the first occurrence is smallest.
chuoi = input("Nh·∫≠p chu·ªói: ")
for i, ch in enumerate(chuoi):  # Duy·ªát t·ª´ng k√Ω t·ª± v·ªõi index
    if chuoi.count(ch) > 1:  # N·∫øu k√Ω t·ª± xu·∫•t hi·ªán nhi·ªÅu h∆°n 1 l·∫ßn
        print("K√Ω t·ª± l·∫∑p ƒë·∫ßu ti√™n (index nh·ªè nh·∫•t):", ch)
        break
# 55. Write a Python program to find the first repeated word in a given string.
chuoi = input("Nh·∫≠p chu·ªói: ")
words = chuoi.split()  # T√°ch th√†nh list t·ª´
seen = set()
for w in words:
    if w in seen:  # N·∫øu g·∫∑p l·∫°i t·ª´
        print("T·ª´ l·∫∑p ƒë·∫ßu ti√™n:", w)
        break
    seen.add(w)
else:
    print("Kh√¥ng c√≥ t·ª´ l·∫∑p")
# 56. Write a Python program to find the second most repeated word in a given string.
from collections import Counter
chuoi = input("Nh·∫≠p chu·ªói: ")
words = chuoi.split()
counts = Counter(words).most_common()  # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán
if len(counts) >= 2:
    print("T·ª´ l·∫∑p nhi·ªÅu th·ª© 2:", counts[1][0])
else:
    print("Kh√¥ng ƒë·ªß t·ª´ ƒë·ªÉ t√¨m")
# 57. Write a  Python program to remove spaces from a given string.
chuoi = input("Nh·∫≠p chu·ªói: ")
# Thay th·∫ø to√†n b·ªô kho·∫£ng tr·∫Øng b·∫±ng chu·ªói r·ªóng
print("K·∫øt qu·∫£:", chuoi.replace(" ", ""))
# 58. Write a Python program to move spaces to the front of a given string.
chuoi = input("Nh·∫≠p chu·ªói: ")
spaces = chuoi.count(" ")  # ƒê·∫øm s·ªë l∆∞·ª£ng kho·∫£ng tr·∫Øng
no_space = chuoi.replace(" ", "")  # X√≥a kho·∫£ng tr·∫Øng
print("K·∫øt qu·∫£:", " " * spaces + no_space)  # ƒê∆∞a kho·∫£ng tr·∫Øng l√™n ƒë·∫ßu
# 59. Write a Python program to find the maximum number of characters in a given string.
from collections import Counter
chuoi = input("Nh·∫≠p chu·ªói: ")
counts = Counter(chuoi)  # ƒê·∫øm t·∫ßn su·∫•t t·ª´ng k√Ω t·ª±
max_char = max(counts, key=counts.get)  # L·∫•y k√Ω t·ª± c√≥ s·ªë l·∫ßn xu·∫•t hi·ªán l·ªõn nh·∫•t
print("K√Ω t·ª± xu·∫•t hi·ªán nhi·ªÅu nh·∫•t:", max_char, "(", counts[max_char], "l·∫ßn )")
# 60. Write a  Python program to capitalize the first and last letters of each word in a given string.
chuoi = input("Nh·∫≠p chu·ªói: ")
result = []
for word in chuoi.split():
    if len(word) == 1:  # N·∫øu t·ª´ ch·ªâ c√≥ 1 k√Ω t·ª±
        result.append(word.upper())
    else:
        # Vi·∫øt hoa ch·ªØ ƒë·∫ßu v√† cu·ªëi
        result.append(word[0].upper() + word[1:-1] + word[-1].upper())
print(" ".join(result))  # Gh√©p l·∫°i th√†nh chu·ªói
